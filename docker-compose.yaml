services:
  redis:
    image: redis:8.2.2-alpine
    expose:
      - ${REDIS_PORT_INTERNAL}
    volumes:
      - redis-data:/data
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  backend:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - ${BACKEND_PORT_INTERNAL}
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      target: backend
    volumes:
      - ./src/backend/:/code
      - /code/.venv
    env_file:
      - ./.env
    networks:
      - app-network

  celery_worker:
    depends_on:
      - backend
      - redis
    container_name: celery_worker
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      target: worker
    volumes:
      - ./src/backend/:/code
      - /code/.venv
    env_file:
      - ./.env
    networks:
      - app-network

  flower:
    container_name: flower
    expose:
      - ${FLOWER_PORT_INTERNAL}
    depends_on:
      - celery_worker
      - redis
    build:
      context: ./src/backend
      dockerfile: Dockerfile
      target: flower
    env_file:
      - ./.env
    networks:
      - app-network

  postgres:
    image: postgis/postgis:18-3.6-alpine
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT_INTERNAL}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:1.29.2-alpine-slim
    depends_on:
      - backend
    volumes:
      - ./src/nginx/conf/nginx.conf:/etc/nginx/nginx.conf.template
      - ./src/nginx/entrypoint.sh:/etc/nginx/entrypoint.sh
      - ./src/nginx/certs/:/etc/nginx/certs/
    environment:
      - BACKEND_PORT_INTERNAL=${BACKEND_PORT_INTERNAL}
      - DOMAIN=${DOMAIN}
      - MAILHOG_UI_PORT_INTERNAL=${MAILHOG_UI_PORT_INTERNAL}
      - FLOWER_PORT_INTERNAL=${FLOWER_PORT_INTERNAL}
    entrypoint: [ "/bin/sh", "/etc/nginx/entrypoint.sh" ]
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog:latest
    expose:
      - ${MAILHOG_UI_PORT_INTERNAL}
    ports:
      - ${MAILHOG_PORT}:${MAILHOG_PORT_INTERNAL}
    networks:
      - app-network

  backup:
    image: postgis/postgis:18-3.6
    container_name: backup
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT_INTERNAL=${POSTGRES_PORT_INTERNAL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - BACKUP_DIR=/backup
    volumes:
      - ./src/backup:/backup
    entrypoint: [ "sh", "-c", "chmod +x /backup/backup.sh 2>/dev/null || true; tail -f /dev/null" ]
    networks:
      - app-network

volumes:
  postgres_data:
  redis-data:

networks:
  app-network:
    driver: bridge
