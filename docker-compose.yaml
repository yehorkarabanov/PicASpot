services:
  redis:
    image: redis:8.2.2-alpine
    expose:
      - ${REDIS_PORT_INTERNAL}
    volumes:
      - redis-data:/data
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    networks:
      - app-network

  backend:
    depends_on:
      - postgres
      - redis
    expose:
      - ${BACKEND_PORT_INTERNAL}
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    volumes:
      - ./src/backend/:/code
      - /code/.venv
    env_file:
      - ./.env
    networks:
      - app-network
    command: sh -c "uv run fastapi dev --port ${BACKEND_PORT_INTERNAL} --host 0.0.0.0 --reload --proxy-headers"

  celery_worker:
    depends_on:
      - backend
      - redis
    container_name: celery_worker
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    command: uv run celery --app app.celery.worker worker --loglevel=info --uid=nobody  --gid=nogroup
    volumes:
      - ./src/backend/:/code
      - /code/.venv
    env_file:
      - ./.env
    networks:
      - app-network

  flower:
    container_name: flower
    expose:
      - ${FLOWER_PORT_INTERNAL}
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT_INTERNAL}/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT_INTERNAL}/0
    depends_on:
      - celery_worker
      - redis
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    command: uv run celery --broker=redis://:${REDIS_PASSWORD}@redis:${REDIS_PORT_INTERNAL}/0 flower --port=${FLOWER_PORT_INTERNAL} --url-prefix=/dev/flower
    networks:
      - app-network

  postgres:
    image: postgis/postgis:18-3.6-alpine
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT_INTERNAL}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - app-network

  nginx:
    image: nginx:1.29.2-alpine-slim
    depends_on:
      - backend
    volumes:
      - ./src/nginx/conf/nginx.conf:/etc/nginx/nginx.conf.template
      - ./src/nginx/entrypoint.sh:/etc/nginx/entrypoint.sh
      - ./src/nginx/certs/:/etc/nginx/certs/
    environment:
      - BACKEND_PORT_INTERNAL=${BACKEND_PORT_INTERNAL}
      - DOMAIN=${DOMAIN}
      - MAILHOG_UI_PORT_INTERNAL=${MAILHOG_UI_PORT_INTERNAL}
    entrypoint: [ "/bin/sh", "/etc/nginx/entrypoint.sh" ]
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog:latest
    expose:
      - ${MAILHOG_UI_PORT_INTERNAL}
    ports:
      - ${MAILHOG_PORT}:${MAILHOG_PORT_INTERNAL}
    networks:
      - app-network

volumes:
  postgres_data:
  redis-data:

networks:
  app-network:
    driver: bridge
