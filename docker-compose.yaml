services:
#  backend:
#    depends_on:
#      - postgres
#    expose:
#      - ${BACKEND_PORT_INTERNAL}
#    build:
#        context: ./backend
#        dockerfile: Dockerfile
#    volumes:
#      - ./backend/:/code
#      - /code/.venv
#    environment:
#      - REDIS_PORT=${REDIS_PORT_INTERNAL}
#      - REDIS_HOST=redis
#      - SECRET_KEY=${SECRET_KEY}
#      - ALGORITHM=${ALGORITHM}
#      - PROJECT_NAME=${PROJECT_NAME}
#      - CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
#      - DEBUG=${BACKEND_DEBUG}
#      - DOMAIN=${DOMAIN}
#      - ACCESS_TOKEN_EXPIRE_SECONDS=${ACCESS_TOKEN_EXPIRE_SECONDS}
#      - SMTP_USER=${SMTP_USER}
#      - SMTP_PASSWORD=${SMTP_PASSWORD}
#      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
#      - SMTP_PORT=${SMTP_PORT}
#      - SMTP_HOST=${SMTP_HOST}
#      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME}
#      - POSTGRES_PORT=${POSTGRES_PORT}
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_HOST=postgres
#      - VERIFY_MAIL_PATH=${VERIFY_MAIL_PATH}
#      - PASSWORD_RESET_PATH=${PASSWORD_RESET_PATH}
#      - BACKEND_PORT_INTERNAL=${BACKEND_PORT_INTERNAL}
#    networks:
#      - app-network
#    command: sh -c "uv run fastapi dev --port ${BACKEND_PORT_INTERNAL} --host 0.0.0.0 --reload --proxy-headers"
#
#  frontend:
#    depends_on:
#      - backend
#    build:
#        context: ./frontend
#        dockerfile: Dockerfile
#    expose:
#      - ${FRONTEND_PORT_INTERNAL}
#    volumes:
#      - ./frontend:/app
#      - /app/node_modules
#    environment:
#      - PORT=${FRONTEND_PORT_INTERNAL}
#      - VERIFY_MAIL_PATH=${VERIFY_MAIL_PATH}
#      - PASSWORD_RESET_PATH=${PASSWORD_RESET_PATH}
#    networks:
#      - app-network
#    tty: true
#    command: sh -c "npm run dev -- --host 0.0.0.0 --port ${FRONTEND_PORT_INTERNAL}"
#
#  postgres:
#    image: postgres:17.2-alpine
#    ports:
#      - ${POSTGRES_PORT}:${POSTGRES_PORT_INTERNAL}
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    environment:
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#    networks:
#      - app-network

  nginx:
    image: nginx:1.29.2-alpine-slim
#    depends_on:
#      - frontend
#      - backend
#      - postgres
    volumes:
      - ./src/nginx/conf/nginx.conf:/etc/nginx/nginx.conf.template
      - ./src/nginx/entrypoint.sh:/etc/nginx/entrypoint.sh
      - ./src/nginx/certs/:/etc/nginx/certs/
    environment:
#        - BACKEND_PORT_INTERNAL=${BACKEND_PORT_INTERNAL}
#        - FRONTEND_PORT_INTERNAL=${FRONTEND_PORT_INTERNAL}
#        - POSTGRES_PORT_INTERNAL=${POSTGRES_PORT_INTERNAL}
#        - REDIS_PORT_INTERNAL=${REDIS_PORT_INTERNAL}
        - DOMAIN=${DOMAIN}
    entrypoint: ["/bin/sh", "/etc/nginx/entrypoint.sh"]
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    networks:
      - app-network

#volumes:
#  postgres_data:

networks:
  app-network:
    driver: bridge